diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2dd73d9..132c4d8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -58,13 +58,13 @@ IF(CURL_FOUND)
 ENDIF()
 
 IF(NOT WIN32)
-  INCLUDE(${CMAKE_SOURCE_DIR}/cmake/FindGSSAPI.cmake)
+  INCLUDE(${PROJECT_SOURCE_DIR}/cmake/FindGSSAPI.cmake)
   IF(GSSAPI_FOUND)
     INCLUDE_DIRECTORIES(${GSSAPI_INCS})
   ENDIF()
 ENDIF()
 
-INCLUDE(${CMAKE_SOURCE_DIR}/cmake/plugins.cmake)
+INCLUDE(${PROJECT_SOURCE_DIR}/cmake/plugins.cmake)
 
 IF(AUTH_GSSAPI_PLUGIN_TYPE MATCHES "STATIC")
   SET(SYSTEM_LIBS ${SYSTEM_LIBS} ${GSSAPI_LIBS})
@@ -72,13 +72,13 @@ ENDIF()
 
 
 IF(WIN32)
-  FILE(REMOVE ${CMAKE_BINARY_DIR}/win/packaging/plugin.conf)
-  INCLUDE(${CMAKE_SOURCE_DIR}/cmake/version_info.cmake)
+  FILE(REMOVE ${PROJECT_BINARY_DIR}/win/packaging/plugin.conf)
+  INCLUDE(${PROJECT_SOURCE_DIR}/cmake/version_info.cmake)
 ENDIF()
 
 IF(MSVC)
   # Speedup system tests
-  INCLUDE(${CMAKE_SOURCE_DIR}/cmake/WindowsCache.cmake)
+  INCLUDE(${PROJECT_SOURCE_DIR}/cmake/WindowsCache.cmake)
   IF (MSVC)
     SET(CONFIG_TYPES "DEBUG" "RELEASE" "RELWITHDEBINFO")
     FOREACH(BUILD_TYPE ${CONFIG_TYPES})
@@ -131,14 +131,14 @@ IF(NOT MARIADB_UNIX_ADDR)
   SET(MARIADB_UNIX_ADDR "/tmp/mysql.sock")
 ENDIF()
 
-INCLUDE("${CMAKE_SOURCE_DIR}/cmake/install.cmake")
+INCLUDE("${PROJECT_SOURCE_DIR}/cmake/install.cmake")
 
 # todo: we don't character sets in share - all is compiled in
 SET(SHAREDIR "share")
 SET(DEFAULT_CHARSET_HOME "${CMAKE_INSTALL_PREFIX}")
 # SET(MARIADB_PLUGINDIR "${CMAKE_INSTALL_PREFIX}/lib/plugin")
 
-INCLUDE(${CMAKE_SOURCE_DIR}/cmake/SearchLibrary.cmake)
+INCLUDE(${PROJECT_SOURCE_DIR}/cmake/SearchLibrary.cmake)
 
 IF(WITH_EXTERNAL_ZLIB)
   FIND_PACKAGE(ZLIB QUIET)
@@ -188,11 +188,11 @@ ELSEIF()
 ENDIF()
 
 # check for various include files
-INCLUDE(${CMAKE_SOURCE_DIR}/cmake/CheckIncludeFiles.cmake)
+INCLUDE(${PROJECT_SOURCE_DIR}/cmake/CheckIncludeFiles.cmake)
 # check for various functions
-INCLUDE(${CMAKE_SOURCE_DIR}/cmake/CheckFunctions.cmake)
+INCLUDE(${PROJECT_SOURCE_DIR}/cmake/CheckFunctions.cmake)
 # check for various types
-INCLUDE(${CMAKE_SOURCE_DIR}/cmake/CheckTypes.cmake)
+INCLUDE(${PROJECT_SOURCE_DIR}/cmake/CheckTypes.cmake)
 
 IF(NOT WITH_SSL AND NOT WITH_SSL STREQUAL "OFF")
   IF(WIN32)
@@ -207,7 +207,7 @@ IF(NOT WITH_SSL STREQUAL "OFF")
     FIND_PACKAGE(OpenSSL)
     IF(OPENSSL_FOUND)
       ADD_DEFINITIONS(-DHAVE_OPENSSL -DHAVE_TLS)
-      SET(SSL_SOURCES "${CMAKE_SOURCE_DIR}/libmariadb/secure/openssl.c")
+      SET(SSL_SOURCES "${PROJECT_SOURCE_DIR}/libmariadb/secure/openssl.c")
       SET(SSL_LIBRARIES ${OPENSSL_LIBRARIES} ${OPENSSL_CRYPTO_LIBRARIES})
       INCLUDE_DIRECTORIES(BEFORE ${OPENSSL_INCLUDE_DIR})
       MESSAGE(STATUS "OpenSSL version: ${OPENSSL_VERSION}")
@@ -219,7 +219,7 @@ IF(NOT WITH_SSL STREQUAL "OFF")
     FIND_PACKAGE(GnuTLS)
     IF(GNUTLS_FOUND)
       ADD_DEFINITIONS(-DHAVE_GNUTLS -DHAVE_TLS)
-      SET(SSL_SOURCES "${CMAKE_SOURCE_DIR}/libmariadb/secure/gnutls.c")
+      SET(SSL_SOURCES "${PROJECT_SOURCE_DIR}/libmariadb/secure/gnutls.c")
       SET(SSL_LIBRARIES ${GNUTLS_LIBRARY})
     ELSE()
       MESSAGE(FATAL "GnuTLS not found")
@@ -228,8 +228,8 @@ IF(NOT WITH_SSL STREQUAL "OFF")
   IF(WIN32)
     IF(WITH_SSL STREQUAL "SCHANNEL")
       ADD_DEFINITIONS(-DHAVE_SCHANNEL -DHAVE_TLS)
-      SET(SSL_SOURCES "${CMAKE_SOURCE_DIR}/libmariadb/secure/schannel.c" "${CMAKE_SOURCE_DIR}/libmariadb/secure/ma_schannel.c")
-      INCLUDE_DIRECTORIES("${CMAKE_SOURCE_DIR}/plugins/pvio/")
+      SET(SSL_SOURCES "${PROJECT_SOURCE_DIR}/libmariadb/secure/schannel.c" "${PROJECT_SOURCE_DIR}/libmariadb/secure/ma_schannel.c")
+      INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/plugins/pvio/")
     ENDIF()
   ENDIF()
 
@@ -237,7 +237,7 @@ IF(NOT WITH_SSL STREQUAL "OFF")
 ENDIF()
 
 IF(NOT WIN32)
-  INCLUDE(${CMAKE_SOURCE_DIR}/cmake/FindIconv.cmake)
+  INCLUDE(${PROJECT_SOURCE_DIR}/cmake/FindIconv.cmake)
 ENDIF()
 
 CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/include/ma_config.h.in
@@ -271,7 +271,7 @@ IF(NOT REMOTEIO_PLUGIN_TYPE MATCHES "OFF")
 ENDIF()
 IF(NOT WIN32)
   IF(NOT AUTH_GSSAPI_PLUGIN_TYPE MATCHES "OFF")
-    INCLUDE(${CMAKE_SOURCE_DIR}/cmake/FindGSSAPI.cmake)
+    INCLUDE(${PROJECT_SOURCE_DIR}/cmake/FindGSSAPI.cmake)
     IF(GSSAPI_FOUND)
       INCLUDE_DIRECTORIES(${GSSAPI_INCS})
       IF(AUTH_GSSAPI_PLUGIN_TYPE MATCHES "STATIC")
@@ -362,7 +362,7 @@ include/my_config\\\\.h$
 )
 
 IF(WITH_TEST_SRCPKG)
-  SET(PACKAGE_FILE ${CMAKE_SOURCE_DIR}/package.name)
+  SET(PACKAGE_FILE ${PROJECT_SOURCE_DIR}/package.name)
   FILE(REMOVE ${PACKAGE_FILE})
   FILE(WRITE ${PACKAGE_FILE} ${CPACK_SOURCE_PACKAGE_FILE_NAME})
 ENDIF()
diff --git a/client/CMakeLists.txt b/client/CMakeLists.txt
index 8756251..cbc5ed9 100644
--- a/client/CMakeLists.txt
+++ b/client/CMakeLists.txt
@@ -1,4 +1,4 @@
-INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)
+INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
 
 IF(WIN32)
   SET_VERSION_INFO("TARGET:mariadb_client_plugin_info"
diff --git a/cmake/install_plugins.cmake b/cmake/install_plugins.cmake
index 370a53f..f671d4f 100644
--- a/cmake/install_plugins.cmake
+++ b/cmake/install_plugins.cmake
@@ -6,6 +6,6 @@ MACRO(INSTALL_PLUGIN name binary_dir)
           LIBRARY DESTINATION "${PLUGIN_INSTALL_DIR}"
           ARCHIVE DESTINATION "${PLUGIN_INSTALL_DIR}")
   IF(WIN32)
-    FILE(APPEND ${CMAKE_BINARY_DIR}/win/packaging/plugin.conf "<File Id=\"${name}.dll\" Name=\"${name}.dll\" DiskId=\"1\" Source=\"${binary_dir}/${CMAKE_BUILD_TYPE}/${name}.dll\"/>\n")
+    FILE(APPEND ${PROJECT_BINARY_DIR}/win/packaging/plugin.conf "<File Id=\"${name}.dll\" Name=\"${name}.dll\" DiskId=\"1\" Source=\"${binary_dir}/${CMAKE_BUILD_TYPE}/${name}.dll\"/>\n")
   ENDIF()
 ENDMACRO()
diff --git a/cmake/plugins.cmake b/cmake/plugins.cmake
index e539fdd..3a7378a 100644
--- a/cmake/plugins.cmake
+++ b/cmake/plugins.cmake
@@ -24,23 +24,23 @@ ENDMACRO()
 MARK_AS_ADVANCED(PLUGINS)
 
 # CIO
-REGISTER_PLUGIN("SOCKET" "${CMAKE_SOURCE_DIR}/plugins/pvio/pvio_socket.c" "pvio_socket_plugin" "STATIC" pvio_socket 0)
+REGISTER_PLUGIN("SOCKET" "${PROJECT_SOURCE_DIR}/plugins/pvio/pvio_socket.c" "pvio_socket_plugin" "STATIC" pvio_socket 0)
 IF(WIN32)
-  REGISTER_PLUGIN("NPIPE" "${CMAKE_SOURCE_DIR}/plugins/pvio/pvio_npipe.c" "pvio_npipe_plugin" "STATIC" pvio_npipe 1)
-  REGISTER_PLUGIN("SHMEM" "${CMAKE_SOURCE_DIR}/plugins/pvio/pvio_shmem.c" "pvio_shmem_plugin" "DYNAMIC" pvio_shmem 1)
+  REGISTER_PLUGIN("NPIPE" "${PROJECT_SOURCE_DIR}/plugins/pvio/pvio_npipe.c" "pvio_npipe_plugin" "STATIC" pvio_npipe 1)
+  REGISTER_PLUGIN("SHMEM" "${PROJECT_SOURCE_DIR}/plugins/pvio/pvio_shmem.c" "pvio_shmem_plugin" "DYNAMIC" pvio_shmem 1)
 ENDIF()
 
 # AUTHENTICATION
-REGISTER_PLUGIN("AUTH_NATIVE" "${CMAKE_SOURCE_DIR}/plugins/auth/my_auth.c" "native_password_client_plugin" "STATIC" "" 0)
-REGISTER_PLUGIN("AUTH_OLDPASSWORD" "${CMAKE_SOURCE_DIR}/plugins/auth/old_password.c" "old_password_client_plugin" "STATIC" "" 1)
-REGISTER_PLUGIN("AUTH_DIALOG" "${CMAKE_SOURCE_DIR}/plugins/auth/dialog.c" "auth_dialog_plugin" "DYNAMIC" dialog 1)
-REGISTER_PLUGIN("AUTH_CLEARTEXT" "${CMAKE_SOURCE_DIR}/plugins/auth/mariadb_clear_text.c" "auth_cleartext_plugin" "DYNAMIC" "mysql_clear_password" 1)
+REGISTER_PLUGIN("AUTH_NATIVE" "${PROJECT_SOURCE_DIR}/plugins/auth/my_auth.c" "native_password_client_plugin" "STATIC" "" 0)
+REGISTER_PLUGIN("AUTH_OLDPASSWORD" "${PROJECT_SOURCE_DIR}/plugins/auth/old_password.c" "old_password_client_plugin" "STATIC" "" 1)
+REGISTER_PLUGIN("AUTH_DIALOG" "${PROJECT_SOURCE_DIR}/plugins/auth/dialog.c" "auth_dialog_plugin" "DYNAMIC" dialog 1)
+REGISTER_PLUGIN("AUTH_CLEARTEXT" "${PROJECT_SOURCE_DIR}/plugins/auth/mariadb_clear_text.c" "auth_cleartext_plugin" "DYNAMIC" "mysql_clear_password" 1)
 IF(WIN32)
-    SET(GSSAPI_SOURCES ${CMAKE_SOURCE_DIR}/plugins/auth/auth_gssapi_client.c ${CMAKE_SOURCE_DIR}/plugins/auth/sspi_client.c ${CMAKE_SOURCE_DIR}/plugins/auth/sspi_errmsg.c)
+    SET(GSSAPI_SOURCES ${PROJECT_SOURCE_DIR}/plugins/auth/auth_gssapi_client.c ${PROJECT_SOURCE_DIR}/plugins/auth/sspi_client.c ${PROJECT_SOURCE_DIR}/plugins/auth/sspi_errmsg.c)
     REGISTER_PLUGIN("AUTH_GSSAPI" "${GSSAPI_SOURCES}" "auth_gssapi_plugin" "DYNAMIC" "auth_gssapi_client" 1)
 ELSE()
   IF(GSSAPI_FOUND)
-    SET(GSSAPI_SOURCES ${CMAKE_SOURCE_DIR}/plugins/auth/auth_gssapi_client.c ${CMAKE_SOURCE_DIR}/plugins/auth/gssapi_client.c ${CMAKE_SOURCE_DIR}/plugins/auth/gssapi_errmsg.c)
+    SET(GSSAPI_SOURCES ${PROJECT_SOURCE_DIR}/plugins/auth/auth_gssapi_client.c ${PROJECT_SOURCE_DIR}/plugins/auth/gssapi_client.c ${PROJECT_SOURCE_DIR}/plugins/auth/gssapi_errmsg.c)
     REGISTER_PLUGIN("AUTH_GSSAPI" "${GSSAPI_SOURCES}" "auth_gssapi_plugin" "DYNAMIC" "auth_gssapi_client" 1)
   ENDIF()
 ENDIF()
@@ -48,18 +48,18 @@ ENDIF()
 #Remote_IO
 IF(CURL_FOUND)
   IF(WIN32)
-    REGISTER_PLUGIN("REMOTEIO" "${CMAKE_SOURCE_DIR}/plugins/io/remote_io.c" "remote_io_plugin" "DYNAMIC" "remote_io" 1)
+    REGISTER_PLUGIN("REMOTEIO" "${PROJECT_SOURCE_DIR}/plugins/io/remote_io.c" "remote_io_plugin" "DYNAMIC" "remote_io" 1)
   ELSE()
-    REGISTER_PLUGIN("REMOTEIO" "${CMAKE_SOURCE_DIR}/plugins/io/remote_io.c" "remote_io_plugin" "DYNAMIC" "remote_io" 1)
+    REGISTER_PLUGIN("REMOTEIO" "${PROJECT_SOURCE_DIR}/plugins/io/remote_io.c" "remote_io_plugin" "DYNAMIC" "remote_io" 1)
   ENDIF()
 ENDIF()
 
 #Trace
-REGISTER_PLUGIN("TRACE_EXAMPLE" "${CMAKE_SOURCE_DIR}/plugins/trace/trace_example.c" "trace_example_plugin" "DYNAMIC" "trace_example" 1)
+REGISTER_PLUGIN("TRACE_EXAMPLE" "${PROJECT_SOURCE_DIR}/plugins/trace/trace_example.c" "trace_example_plugin" "DYNAMIC" "trace_example" 1)
 
 #Connection
-REGISTER_PLUGIN("REPLICATION" "${CMAKE_SOURCE_DIR}/plugins/connection/replication.c" "connection_replication_plugin" "DYNAMIC" "replication" 1)
-REGISTER_PLUGIN("AURORA" "${CMAKE_SOURCE_DIR}/plugins/connection/aurora.c" "connection_aurora_plugin" "DYNAMIC" "aurora"  1)
+REGISTER_PLUGIN("REPLICATION" "${PROJECT_SOURCE_DIR}/plugins/connection/replication.c" "connection_replication_plugin" "DYNAMIC" "replication" 1)
+REGISTER_PLUGIN("AURORA" "${PROJECT_SOURCE_DIR}/plugins/connection/aurora.c" "connection_aurora_plugin" "DYNAMIC" "aurora"  1)
 
 # Allow registration of additional plugins
 IF(PLUGIN_CONF_FILE)
@@ -91,7 +91,7 @@ ENDIF()
 # since some files contain multiple plugins, remove duplicates from source files 
 LIST(REMOVE_DUPLICATES LIBMARIADB_SOURCES)
 
-CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/libmariadb/ma_client_plugin.c.in
-  ${CMAKE_BINARY_DIR}/libmariadb/ma_client_plugin.c)
+CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/libmariadb/ma_client_plugin.c.in
+  ${PROJECT_BINARY_DIR}/libmariadb/ma_client_plugin.c)
 
 MARK_AS_ADVANCED(LIBMARIADB_SOURCES)
diff --git a/cmake/version_info.cmake b/cmake/version_info.cmake
index 264e380..34c4e7c 100644
--- a/cmake/version_info.cmake
+++ b/cmake/version_info.cmake
@@ -2,8 +2,8 @@ FUNCTION(GET_FILE_VERSION FILE_NAME FILE_VERSION)
 
   # if we build from a git repository, we calculate the file version:
   #  Patch number is numer of commits for given file
-  IF(EXISTS ${CMAKE_SOURCE_DIR}/.git)
-    EXECUTE_PROCESS(COMMAND git --git-dir=${CMAKE_SOURCE_DIR}/.git --work-tree=${CMAKE_SOURCE_DIR} rev-list HEAD --count -- ${FILE_NAME} 
+  IF(EXISTS ${PROJECT_SOURCE_DIR}/.git)
+    EXECUTE_PROCESS(COMMAND git --git-dir=${PROJECT_SOURCE_DIR}/.git --work-tree=${PROJECT_SOURCE_DIR} rev-list HEAD --count -- ${FILE_NAME} 
       OUTPUT_VARIABLE FV)
     STRING(REPLACE "\n" "" FV ${FV})
     SET(${FILE_VERSION} ${FV} PARENT_SCOPE)
@@ -28,9 +28,9 @@ MACRO(SET_VERSION_INFO)
       STRING(REPLACE "FILE_DESCRIPTION:" "" FILE_DESCRIPTION ${PROPERTY})
     ENDIF()
   ENDFOREACH()
-  CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/win/resource.rc.in
-                 ${CMAKE_BINARY_DIR}/win/${TARGET}.rc)
-  SET(${TARGET}_RC ${CMAKE_BINARY_DIR}/win/${TARGET}.rc)
+  CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/win/resource.rc.in
+                 ${PROJECT_BINARY_DIR}/win/${TARGET}.rc)
+  SET(${TARGET}_RC ${PROJECT_BINARY_DIR}/win/${TARGET}.rc)
 ENDMACRO()
 
 
diff --git a/examples/CMakeLists.txt b/examples/CMakeLists.txt
index 6605f01..d1862a5 100644
--- a/examples/CMakeLists.txt
+++ b/examples/CMakeLists.txt
@@ -1,7 +1,7 @@
 SET(EXAMPLE_FILES "mysql_affected_rows" 
                   "mysql_debug")
 
-INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)
+INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
 
 ENABLE_TESTING()
 
@@ -13,6 +13,6 @@ FOREACH(EXAMPLE_FILE ${EXAMPLE_FILES})
   SET(XML_EXAMPLE_FILES $XML_EXAMPLE_FILES "examples/${EXAMPLE_FILE}.c")
   ADD_EXECUTABLE(${EXAMPLE_FILE} ${EXAMPLE_FILE}.c)
   TARGET_LINK_LIBRARIES(${EXAMPLE_FILE} mariadbclient)
-  ADD_TEST(TEST_${EXAMPLE_FILE} ./${EXECUTABLE_OUTPUT_PATH}/test_output ./${EXAMPLE_FILE} ${CMAKE_SOURCE_DIR}/examples/${EXAMPLE_FILE}.out ${CMAKE_SOURCE_DIR}/examples/${EXAMPLE_FILE}.exp)
+  ADD_TEST(TEST_${EXAMPLE_FILE} ./${EXECUTABLE_OUTPUT_PATH}/test_output ./${EXAMPLE_FILE} ${PROJECT_SOURCE_DIR}/examples/${EXAMPLE_FILE}.out ${PROJECT_SOURCE_DIR}/examples/${EXAMPLE_FILE}.exp)
 
 ENDFOREACH(EXAMPLE_FILE ${EXAMPLE_FILES})
diff --git a/include/CMakeLists.txt b/include/CMakeLists.txt
index 979f9d6..8f0db99 100644
--- a/include/CMakeLists.txt
+++ b/include/CMakeLists.txt
@@ -1,19 +1,19 @@
-SET(MARIADB_CLIENT_INCLUDES ${CMAKE_SOURCE_DIR}/include/mariadb_com.h
-                            ${CMAKE_SOURCE_DIR}/include/mysql.h
-                            ${CMAKE_SOURCE_DIR}/include/mariadb_stmt.h
-                            ${CMAKE_SOURCE_DIR}/include/ma_pvio.h
-                            ${CMAKE_SOURCE_DIR}/include/ma_tls.h
-                            ${CMAKE_SOURCE_DIR}/include/mariadb_version.h
-                            ${CMAKE_SOURCE_DIR}/include/ma_list.h
-                            ${CMAKE_SOURCE_DIR}/include/ma_errmsg.h
-                            ${CMAKE_SOURCE_DIR}/include/mariadb_dyncol.h
-                            ${CMAKE_SOURCE_DIR}/include/mariadb_ctype.h)
+SET(MARIADB_CLIENT_INCLUDES ${PROJECT_SOURCE_DIR}/include/mariadb_com.h
+                            ${PROJECT_SOURCE_DIR}/include/mysql.h
+                            ${PROJECT_SOURCE_DIR}/include/mariadb_stmt.h
+                            ${PROJECT_SOURCE_DIR}/include/ma_pvio.h
+                            ${PROJECT_SOURCE_DIR}/include/ma_tls.h
+                            ${PROJECT_SOURCE_DIR}/include/mariadb_version.h
+                            ${PROJECT_SOURCE_DIR}/include/ma_list.h
+                            ${PROJECT_SOURCE_DIR}/include/ma_errmsg.h
+                            ${PROJECT_SOURCE_DIR}/include/mariadb_dyncol.h
+                            ${PROJECT_SOURCE_DIR}/include/mariadb_ctype.h)
 SET(MYSQL_ADDITIONAL_INCLUDES
-   ${CMAKE_SOURCE_DIR}/include/mysql/client_plugin.h
-   ${CMAKE_SOURCE_DIR}/include/mysql/plugin_auth_common.h
-   ${CMAKE_SOURCE_DIR}/include/mysql/plugin_auth.h)
+   ${PROJECT_SOURCE_DIR}/include/mysql/client_plugin.h
+   ${PROJECT_SOURCE_DIR}/include/mysql/plugin_auth_common.h
+   ${PROJECT_SOURCE_DIR}/include/mysql/plugin_auth.h)
  SET(MARIADB_ADDITIONAL_INCLUDES
-   ${CMAKE_SOURCE_DIR}/include/mariadb/ma_io.h)
+   ${PROJECT_SOURCE_DIR}/include/mariadb/ma_io.h)
 
 INSTALL(FILES
    ${MARIADB_CLIENT_INCLUDES}
diff --git a/libmariadb/CMakeLists.txt b/libmariadb/CMakeLists.txt
index 4b59c36..5a2be93 100644
--- a/libmariadb/CMakeLists.txt
+++ b/libmariadb/CMakeLists.txt
@@ -1,13 +1,13 @@
-INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include 
+INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include 
                     ${ZLIB_INC}
-                    ${CMAKE_SOURCE_DIR}/libmariadb)
+                    ${PROJECT_SOURCE_DIR}/libmariadb)
 					
 ADD_DEFINITIONS(-D ENABLED_LOCAL_INFILE)
 ADD_DEFINITIONS(-D HAVE_COMPRESS)
 ADD_DEFINITIONS(-D LIBMARIADB)
 ADD_DEFINITIONS(-D THREAD)
 
-INCLUDE(${CMAKE_SOURCE_DIR}/cmake/sign.cmake)
+INCLUDE(${PROJECT_SOURCE_DIR}/cmake/sign.cmake)
 
 SET(MARIADB_LIB_SYMBOLS
  mariadb_connection
@@ -265,16 +265,16 @@ ma_loaddata.c
 ma_stmt_codec.c
 ma_string.c
 ma_dtoa.c
-${CMAKE_BINARY_DIR}/libmariadb/ma_client_plugin.c
+${PROJECT_BINARY_DIR}/libmariadb/ma_client_plugin.c
 ma_io.c
 ${SSL_SOURCES}
 )
 
 IF(WIN32)
   ADD_DEFINITIONS(-DSIZEOF_CHARP=${CMAKE_SIZEOF_VOID_P})
-  INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/win-iconv)
+  INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/win-iconv)
   SET(LIBMARIADB_SOURCES ${LIBMARIADB_SOURCES}
-                         ${CMAKE_SOURCE_DIR}/win-iconv/win_iconv.c)
+                         ${PROJECT_SOURCE_DIR}/win-iconv/win_iconv.c)
 ELSE()
   IF(ICONV_INCLUDE_DIR)
      INCLUDE_DIRECTORIES(BEFORE ${ICONV_INCLUDE_DIR}) 
@@ -304,7 +304,7 @@ ELSE()
     ../zlib/zutil.c
   )
 SET(LIBMARIADB_SOURCES ${LIBMARIADB_SOURCES} ${ZLIB_SOURCES})
-  INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/zlib)
+  INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/zlib)
 ENDIF()
 
 IF(WITH_DYNCOL)
@@ -316,7 +316,7 @@ ENDIF()
 SET(LIBMARIADB_SOURCES ${LIBMARIADB_SOURCES} mariadb_async.c ma_context.c)
 SET(MARIADB_LIB_SYMBOLS ${MARIADB_LIB_SYMBOLS} ${MARIADB_NONBLOCK_SYMBOLS})
 
-INCLUDE(${CMAKE_SOURCE_DIR}/cmake/export.cmake)
+INCLUDE(${PROJECT_SOURCE_DIR}/cmake/export.cmake)
 CREATE_EXPORT_FILE(mariadbclient
                    ${CMAKE_CURRENT_BINARY_DIR}
                    "${MARIADB_LIB_SYMBOLS}")
@@ -336,8 +336,8 @@ ENDIF()
 # Xcode doesn't support targets that have only object files,
 # so let's add an empty file to keep Xcode happy
 IF(CMAKE_GENERATOR MATCHES Xcode)
-  FILE(WRITE ${CMAKE_SOURCE_DIR}/libmariadb/empty.c "")
-  SET(EMPTY_FILE ${CMAKE_SOURCE_DIR}/libmariadb/empty.c)
+  FILE(WRITE ${PROJECT_SOURCE_DIR}/libmariadb/empty.c "")
+  SET(EMPTY_FILE ${PROJECT_SOURCE_DIR}/libmariadb/empty.c)
 ENDIF()
 
 IF(WIN32)
@@ -368,9 +368,9 @@ ENDIF()
 
 IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
   TARGET_LINK_LIBRARIES (libmariadb "-Wl,--no-undefined")
-  TARGET_LINK_LIBRARIES (libmariadb "-Wl,--version-script=${CMAKE_BINARY_DIR}/libmariadb/mariadbclient.def")
+  TARGET_LINK_LIBRARIES (libmariadb "-Wl,--version-script=${PROJECT_BINARY_DIR}/libmariadb/mariadbclient.def")
   TARGET_LINK_LIBRARIES (mariadbclient "-Wl,--no-undefined")
-  TARGET_LINK_LIBRARIES (mariadbclient "-Wl,--version-script=${CMAKE_BINARY_DIR}/libmariadb/mariadbclient.def")
+  TARGET_LINK_LIBRARIES (mariadbclient "-Wl,--version-script=${PROJECT_BINARY_DIR}/libmariadb/mariadbclient.def")
 ENDIF()
 
 SET_TARGET_PROPERTIES(mariadbclient PROPERTIES IMPORTED_INTERFACE_LINK_LIBRARIES "${SYSTEM_LIBS}")
@@ -385,7 +385,7 @@ SET_TARGET_PROPERTIES(libmariadb PROPERTIES VERSION
 #
 # Installation
 #
-INCLUDE(${CMAKE_SOURCE_DIR}/cmake/symlink.cmake)
+INCLUDE(${PROJECT_SOURCE_DIR}/cmake/symlink.cmake)
 
 
 # There are still several projects which don't make use
diff --git a/mariadb_config/CMakeLists.txt b/mariadb_config/CMakeLists.txt
index ebe05fe..d55b964 100644
--- a/mariadb_config/CMakeLists.txt
+++ b/mariadb_config/CMakeLists.txt
@@ -1,4 +1,4 @@
-INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)
+INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
 
 # Figure out additional libraries for use with
 
diff --git a/plugins/CMakeLists.txt b/plugins/CMakeLists.txt
index ff89c5d..aa6efbd 100644
--- a/plugins/CMakeLists.txt
+++ b/plugins/CMakeLists.txt
@@ -1,4 +1,4 @@
-FILE(GLOB plugin_dirs ${CMAKE_SOURCE_DIR}/plugins/*)
+FILE(GLOB plugin_dirs ${PROJECT_SOURCE_DIR}/plugins/*)
 FOREACH(dir ${plugin_dirs})
   IF (EXISTS ${dir}/CMakeLists.txt)
     ADD_SUBDIRECTORY(${dir})
diff --git a/plugins/auth/CMakeLists.txt b/plugins/auth/CMakeLists.txt
index d83dcaa..e679f3b 100644
--- a/plugins/auth/CMakeLists.txt
+++ b/plugins/auth/CMakeLists.txt
@@ -1,9 +1,9 @@
-INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)
-INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/plugins/auth)
+INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
+INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/plugins/auth)
 
-INCLUDE(${CMAKE_SOURCE_DIR}/cmake/install_plugins.cmake)
+INCLUDE(${PROJECT_SOURCE_DIR}/cmake/install_plugins.cmake)
 IF(WITH_SIGNCODE)
-  INCLUDE(${CMAKE_SOURCE_DIR}/cmake/sign.cmake)
+  INCLUDE(${PROJECT_SOURCE_DIR}/cmake/sign.cmake)
 ENDIF()
 
 # Dialog plugin
@@ -16,13 +16,13 @@ IF(AUTH_DIALOG_PLUGIN_TYPE MATCHES "DYNAMIC")
                      "ORIGINAL_FILE_NAME:dialog.dll"
                      "FILE_DESCRIPTION:Authentication plugin")
   ENDIF()
-  SET(DIALOG_SOURCES ${ialog_RC} dialog.c ${CMAKE_SOURCE_DIR}/libmariadb/get_password.c)
+  SET(DIALOG_SOURCES ${ialog_RC} dialog.c ${PROJECT_SOURCE_DIR}/libmariadb/get_password.c)
   IF(WIN32)
-    SET(DIALOG_SOURCES ${DIALOG_SOURCES} ${CMAKE_SOURCE_DIR}/plugins/plugin.def)
+    SET(DIALOG_SOURCES ${DIALOG_SOURCES} ${PROJECT_SOURCE_DIR}/plugins/plugin.def)
   ENDIF()
   ADD_LIBRARY(dialog MODULE ${DIALOG_SOURCES})
   SET_TARGET_PROPERTIES(dialog PROPERTIES PREFIX "")
-  INSTALL_PLUGIN(dialog ${CMAKE_BINARY_DIR}/plugins/auth)
+  INSTALL_PLUGIN(dialog ${PROJECT_BINARY_DIR}/plugins/auth)
   SIGN_TARGET(dialog)
 ENDIF()
 
@@ -38,11 +38,11 @@ IF(AUTH_OLDPASSWORD_PLUGIN_TYPE MATCHES "DYNAMIC")
   ENDIF()
   SET(OLDPASSWORD_SOURCES ${old_password_RC} old_password.c)
   IF(WIN32)
-    SET(OLDPASSWORD_SOURCES ${DIALOG_SOURCES} ${CMAKE_SOURCE_DIR}/plugins/plugin.def)
+    SET(OLDPASSWORD_SOURCES ${DIALOG_SOURCES} ${PROJECT_SOURCE_DIR}/plugins/plugin.def)
   ENDIF()
   ADD_LIBRARY(mysql_old_password MODULE ${OLDPASSWORD_SOURCES})
   SET_TARGET_PROPERTIES(mysql_old_password PROPERTIES PREFIX "")
-  INSTALL_PLUGIN(mysql_old_password ${CMAKE_BINARY_DIR}/plugins/auth)
+  INSTALL_PLUGIN(mysql_old_password ${PROJECT_BINARY_DIR}/plugins/auth)
   SIGN_TARGET(mysql_old_password)
 ENDIF()
 
@@ -58,11 +58,11 @@ IF(AUTH_CLEARTEXT_PLUGIN_TYPE MATCHES "DYNAMIC")
   ENDIF()
   SET(CTEXT_SOURCES mariadb_cleartext.c)
   IF(WIN32)
-    SET(CTEXT_SOURCES ${CTEXT_SOURCES} ${mysql_clear_password_RC} ${CMAKE_SOURCE_DIR}/plugins/plugin.def)
+    SET(CTEXT_SOURCES ${CTEXT_SOURCES} ${mysql_clear_password_RC} ${PROJECT_SOURCE_DIR}/plugins/plugin.def)
   ENDIF()
   ADD_LIBRARY(mysql_clear_password MODULE ${CTEXT_SOURCES})
   SET_TARGET_PROPERTIES(mysql_clear_password PROPERTIES PREFIX "")
-  INSTALL_PLUGIN(mysql_clear_password ${CMAKE_BINARY_DIR}/plugins/auth)
+  INSTALL_PLUGIN(mysql_clear_password ${PROJECT_BINARY_DIR}/plugins/auth)
   SIGN_TARGET(mysql_clear_password)
 ENDIF()
 
@@ -80,7 +80,7 @@ IF(${AUTH_GSSAPI_PLUGIN_TYPE} MATCHES "DYNAMIC")
                      "ORIGINAL_FILE_NAME:auth_gssapi_client.dll"
                      "FILE_DESCRIPTION:Authentication plugin")
                    ADD_DEFINITIONS(-DHAVE_AUTH_GSSAPI_DYNAMIC=1)               
-    SET(GSSAPI_SOURCES auth_gssapi_client.c sspi_client.c sspi_errmsg.c ${CMAKE_SOURCE_DIR}/plugins/plugin.def ${gssapi_RC})
+    SET(GSSAPI_SOURCES auth_gssapi_client.c sspi_client.c sspi_errmsg.c ${PROJECT_SOURCE_DIR}/plugins/plugin.def ${gssapi_RC})
   ELSE()
     IF(GSSAPI_FOUND)
       SET(GSSAPI_SOURCES auth_gssapi_client.c gssapi_client.c gssapi_errmsg.c)
@@ -94,7 +94,7 @@ IF(${AUTH_GSSAPI_PLUGIN_TYPE} MATCHES "DYNAMIC")
       TARGET_LINK_LIBRARIES(auth_gssapi_client ${GSSAPI_LIBS})
     ENDIF()
     SET_TARGET_PROPERTIES(auth_gssapi_client PROPERTIES PREFIX "")
-    INSTALL_PLUGIN(auth_gssapi_client ${CMAKE_BINARY_DIR}/plugins/auth)
+    INSTALL_PLUGIN(auth_gssapi_client ${PROJECT_BINARY_DIR}/plugins/auth)
     SIGN_TARGET(auth_gssapi_client)
   ENDIF()
 ENDIF()
diff --git a/plugins/connection/CMakeLists.txt b/plugins/connection/CMakeLists.txt
index 7dfe11b..8f6af6b 100644
--- a/plugins/connection/CMakeLists.txt
+++ b/plugins/connection/CMakeLists.txt
@@ -3,7 +3,7 @@ IF(WIN32)
 ENDIF()
 
 SET(CMAKE_SHARED_LIBRARY_PREFIX "")
-INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)
+INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
 
 IF(REPLICATION_PLUGIN_TYPE MATCHES "DYNAMIC")
   IF(WIN32)
diff --git a/plugins/io/CMakeLists.txt b/plugins/io/CMakeLists.txt
index debb167..a3303b4 100644
--- a/plugins/io/CMakeLists.txt
+++ b/plugins/io/CMakeLists.txt
@@ -1,8 +1,8 @@
-INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)
+INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
 
-INCLUDE(${CMAKE_SOURCE_DIR}/cmake/install_plugins.cmake)
+INCLUDE(${PROJECT_SOURCE_DIR}/cmake/install_plugins.cmake)
 IF(WITH_SIGNCODE)
-  INCLUDE(${CMAKE_SOURCE_DIR}/cmake/sign.cmake)
+  INCLUDE(${PROJECT_SOURCE_DIR}/cmake/sign.cmake)
 ENDIF()
 
 IF(REMOTEIO_PLUGIN_TYPE MATCHES "DYNAMIC")
@@ -18,10 +18,10 @@ IF(REMOTEIO_PLUGIN_TYPE MATCHES "DYNAMIC")
     INCLUDE_DIRECTORIES(${CURL_INCLUDE_DIR})
     SET(REMOTE_IO_SOURCES ${remote_io_RC} remote_io.c)
     ADD_DEFINITIONS(-DHAVE_REMOTEIO_DYNAMIC=1)
-    ADD_LIBRARY(remote_io MODULE ${REMOTE_IO_SOURCES} ${CMAKE_SOURCE_DIR}/plugins/plugin.def)
+    ADD_LIBRARY(remote_io MODULE ${REMOTE_IO_SOURCES} ${PROJECT_SOURCE_DIR}/plugins/plugin.def)
     TARGET_LINK_LIBRARIES(remote_io ${CURL_LIBRARIES})
     SET_TARGET_PROPERTIES(remote_io PROPERTIES PREFIX "")
-    INSTALL_PLUGIN(remote_io ${CMAKE_BINARY_DIR}/plugins/io)
+    INSTALL_PLUGIN(remote_io ${PROJECT_BINARY_DIR}/plugins/io)
     SIGN_TARGET(remote_io)
   ENDIF()
 ENDIF()
diff --git a/plugins/pvio/CMakeLists.txt b/plugins/pvio/CMakeLists.txt
index 4dd18bf..726fb0a 100644
--- a/plugins/pvio/CMakeLists.txt
+++ b/plugins/pvio/CMakeLists.txt
@@ -2,12 +2,12 @@ IF(WIN32)
   SET(EXPORT_FILE "pvio_plugin.def")
 ENDIF()
 
-INCLUDE(${CMAKE_SOURCE_DIR}/cmake/install_plugins.cmake)
+INCLUDE(${PROJECT_SOURCE_DIR}/cmake/install_plugins.cmake)
 IF(WITH_SIGNCODE)
-  INCLUDE(${CMAKE_SOURCE_DIR}/cmake/sign.cmake)
+  INCLUDE(${PROJECT_SOURCE_DIR}/cmake/sign.cmake)
 ENDIF()
 
-INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)
+INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
 
 SET(CMAKE_SHARED_LIBRARY_PREFIX "")
 
@@ -21,7 +21,7 @@ IF(SOCKET_PLUGIN_TYPE MATCHES "DYNAMIC")
   ENDIF()
   ADD_DEFINITIONS(-DHAVE_SOCKET_DYNAMIC=1)
   ADD_LIBRARY(pvio_socket MODULE ${pvio_socket_RC} pvio_socket.c ${EXPORT_FILE})
-  INSTALL_PLUGIN(pvio_socket ${CMAKE_BINARY_DIR}/plugins/pvio)
+  INSTALL_PLUGIN(pvio_socket ${PROJECT_BINARY_DIR}/plugins/pvio)
   SIGN_TARGET(pvio_socket)
 ENDIF()
 
@@ -36,7 +36,7 @@ IF(WIN32)
     ENDIF()
     ADD_DEFINITIONS(-DHAVE_NPIPE_DYNAMIC=1)
     ADD_LIBRARY(pvio_npipe MODULE ${pvio_npipe_RC} pvio_npipe.c ${EXPORT_FILE})
-    INSTALL_PLUGIN(pvio_npipe ${CMAKE_BINARY_DIR}/plugins/pvio)
+    INSTALL_PLUGIN(pvio_npipe ${PROJECT_BINARY_DIR}/plugins/pvio)
     SIGN_TARGET(pvio_npipe)
   ENDIF()
   IF(SHMEM_PLUGIN_TYPE MATCHES "DYNAMIC")
@@ -49,7 +49,7 @@ IF(WIN32)
                        "FILE_DESCRIPTION:VIO plugin for shared memory communication")
     ENDIF()
     ADD_LIBRARY(pvio_shmem MODULE ${pvio_shmem_RC} pvio_shmem.c ${EXPORT_FILE})
-    INSTALL_PLUGIN(pvio_shmem ${CMAKE_BINARY_DIR}/plugins/pvio)
+    INSTALL_PLUGIN(pvio_shmem ${PROJECT_BINARY_DIR}/plugins/pvio)
     SIGN_TARGET(pvio_shmem)
   ENDIF()
 ENDIF()
diff --git a/plugins/trace/CMakeLists.txt b/plugins/trace/CMakeLists.txt
index 18a3dbc..2c86631 100644
--- a/plugins/trace/CMakeLists.txt
+++ b/plugins/trace/CMakeLists.txt
@@ -1,7 +1,7 @@
-INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)
-INCLUDE(${CMAKE_SOURCE_DIR}/cmake/install_plugins.cmake)
+INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
+INCLUDE(${PROJECT_SOURCE_DIR}/cmake/install_plugins.cmake)
 IF(WITH_SIGNCODE)
-  INCLUDE(${CMAKE_SOURCE_DIR}/cmake/sign.cmake)
+  INCLUDE(${PROJECT_SOURCE_DIR}/cmake/sign.cmake)
 ENDIF()
 
 # Trace example plugin
@@ -16,10 +16,10 @@ IF(TRACE_EXAMPLE_PLUGIN_TYPE MATCHES "DYNAMIC")
   ADD_DEFINITIONS(-DHAVE_TRACE_EXAMPLE_PLUGIN_DYNAMIC=1)
   SET(TRACE_EXAMPLE_SOURCES ${trace_example_RC} trace_example.c)
   IF(WIN32)
-    SET(TRACE_EXAMPLE_SOURCES ${TRACE_EXAMPLE_SOURCES} ${CMAKE_SOURCE_DIR}/plugins/plugin.def)
+    SET(TRACE_EXAMPLE_SOURCES ${TRACE_EXAMPLE_SOURCES} ${PROJECT_SOURCE_DIR}/plugins/plugin.def)
   ENDIF()
   ADD_LIBRARY(trace_example MODULE ${TRACE_EXAMPLE_SOURCES})
   SET_TARGET_PROPERTIES(trace_example PROPERTIES PREFIX "")
-  INSTALL_PLUGIN(trace_example ${CMAKE_BINARY_DIR}/plugins/trace)
+  INSTALL_PLUGIN(trace_example ${PROJECT_BINARY_DIR}/plugins/trace)
   SIGN_TARGET(trace_example)
 ENDIF()
diff --git a/unittest/libmariadb/CMakeLists.txt b/unittest/libmariadb/CMakeLists.txt
index 79a1ccc..c5da8b4 100644
--- a/unittest/libmariadb/CMakeLists.txt
+++ b/unittest/libmariadb/CMakeLists.txt
@@ -20,9 +20,9 @@ ENDIF()
 ENABLE_TESTING()
 
 
-INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include
-                    ${CMAKE_BINARY_DIR}/include
-                    ${CMAKE_SOURCE_DIR}/unittest/mytap)
+INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include
+                    ${PROJECT_BINARY_DIR}/include
+                    ${PROJECT_SOURCE_DIR}/unittest/mytap)
 ADD_DEFINITIONS(-DLIBMARIADB)
 
 SET(API_TESTS "basic-t" "fetch" "charset" "logs" "cursor" "errors" "view" "ps" "ps_bugs" 
@@ -39,32 +39,32 @@ SET(MANUAL_TESTS "t_aurora" "t_conc173")
 IF(WITH_SSL)
   IF(OPENSSL_FOUND)
     #create certificates
-    IF(EXISTS "${CMAKE_SOURCE_DIR}/unittest/libmariadb/certs/server-cert.pem")
+    IF(EXISTS "${PROJECT_SOURCE_DIR}/unittest/libmariadb/certs/server-cert.pem")
       MESSAGE(STATUS "certificates already exist")
     ELSE()
       MESSAGE(STATUS "creating certificates")
       IF(WIN32)
         EXECUTE_PROCESS(COMMAND create_certs.bat 
-                        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/unittest/libmariadb/certs
+                        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/unittest/libmariadb/certs
                         OUTPUT_FILE x.1 ERROR_FILE x.2)
       ELSE()
         EXECUTE_PROCESS(COMMAND ./create_certs.sh 
-                        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/unittest/libmariadb/certs)
+                        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/unittest/libmariadb/certs)
       ENDIF()
     ENDIF()
 
     EXECUTE_PROCESS(COMMAND openssl x509 -in server-cert.pem -sha1 -fingerprint -noout
-                    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/unittest/libmariadb/certs
+                    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/unittest/libmariadb/certs
                     OUTPUT_VARIABLE FINGER_PRINT)
     STRING(REPLACE "SHA1 Fingerprint=" "" FINGER_PRINT "${FINGER_PRINT}")
     STRING(REPLACE "\n" "" FINGER_PRINT "${FINGER_PRINT}")
     STRING(REPLACE ":" "" SSL_CERT_FINGER_PRINT "${FINGER_PRINT}")
 
   ENDIF()
-  CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/unittest/libmariadb/ssl.c.in
-                 ${CMAKE_SOURCE_DIR}/unittest/libmariadb/ssl.c)
-  CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/unittest/libmariadb/fingerprint.list.in
-                 ${CMAKE_SOURCE_DIR}/unittest/libmariadb/fingerprint.list)
+  CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/unittest/libmariadb/ssl.c.in
+                 ${PROJECT_SOURCE_DIR}/unittest/libmariadb/ssl.c)
+  CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/unittest/libmariadb/fingerprint.list.in
+                 ${PROJECT_SOURCE_DIR}/unittest/libmariadb/fingerprint.list)
   SET(API_TESTS ${API_TESTS} "ssl")
 ENDIF()
 
diff --git a/unittest/mytap/CMakeLists.txt b/unittest/mytap/CMakeLists.txt
index 3ae944e..6b49f17 100644
--- a/unittest/mytap/CMakeLists.txt
+++ b/unittest/mytap/CMakeLists.txt
@@ -14,9 +14,9 @@
 # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 
 
-INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include ${CMAKE_SOURCE_DIR}/zlib
-                    ${CMAKE_SOURCE_DIR}/sql
-                    ${CMAKE_BINARY_DIR}/include
-                    ${CMAKE_SOURCE_DIR}/regex
-                    ${CMAKE_SOURCE_DIR}/extra/yassl/include)
+INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include ${PROJECT_SOURCE_DIR}/zlib
+                    ${PROJECT_SOURCE_DIR}/sql
+                    ${PROJECT_BINARY_DIR}/include
+                    ${PROJECT_SOURCE_DIR}/regex
+                    ${PROJECT_SOURCE_DIR}/extra/yassl/include)
 ADD_LIBRARY(mytap tap.c)
diff --git a/win/packaging/CMakeLists.txt b/win/packaging/CMakeLists.txt
index 768ac69..7968b40 100644
--- a/win/packaging/CMakeLists.txt
+++ b/win/packaging/CMakeLists.txt
@@ -1,7 +1,7 @@
-SET(CLIENT_LIB_DIR ${CMAKE_BINARY_DIR}/libmariadb/${CMAKE_BUILD_TYPE})
-SET(CLIENT_BIN_DIR ${CMAKE_BINARY_DIR}/client/${CMAKE_BUILD_TYPE})
-SET(CLIENT_DBG_DIR ${CMAKE_BINARY_DIR}/libmariadb/Debug)
-SET(CLIENT_INC_DIR ${CMAKE_SOURCE_DIR}/include)
+SET(CLIENT_LIB_DIR ${PROJECT_BINARY_DIR}/libmariadb/${CMAKE_BUILD_TYPE})
+SET(CLIENT_BIN_DIR ${PROJECT_BINARY_DIR}/client/${CMAKE_BUILD_TYPE})
+SET(CLIENT_DBG_DIR ${PROJECT_BINARY_DIR}/libmariadb/Debug)
+SET(CLIENT_INC_DIR ${PROJECT_SOURCE_DIR}/include)
 
 SET(PRODUCT_NAME "MariaDB Connector C")
 SET(PRODUCT_INSTALL_DIR "MariaDB")
@@ -41,14 +41,14 @@ ENDFOREACH()
 
 SET(ALL_INCLUDES ${MARIADB_CLIENT_INCLUDES} ${MARIADB_ADDITIONAL_INCLUDES})
 FOREACH(src ${ALL_INCLUDES})
-  STRING(REPLACE "${CMAKE_SOURCE_DIR}/include/" "" src ${src})
+  STRING(REPLACE "${PROJECT_SOURCE_DIR}/include/" "" src ${src})
   STRING(REPLACE "-" "_" src_id ${src})
   STRING(REPLACE "mysql/" "" src_id ${src_id})
   STRING(REPLACE "mysql/" "" src_name ${src})
   IF(${src} MATCHES "mysql/")
-    SET(MARIADB_INCLUDEMYSQL_FILES "${MARIADB_INCLUDEMYSQL_FILES} <File Id=\"${src_id}\" Name=\"${src_name}\"  DiskId=\"1\"  Source=\"${CMAKE_SOURCE_DIR}/include/${src}\"/>\n")
+    SET(MARIADB_INCLUDEMYSQL_FILES "${MARIADB_INCLUDEMYSQL_FILES} <File Id=\"${src_id}\" Name=\"${src_name}\"  DiskId=\"1\"  Source=\"${PROJECT_SOURCE_DIR}/include/${src}\"/>\n")
   ELSE()
-    SET(MARIADB_INCLUDE_FILES "${MARIADB_INCLUDE_FILES} <File Id=\"${src_id}\" Name=\"${src_name}\"  DiskId=\"1\"  Source=\"${CMAKE_SOURCE_DIR}/include/${src}\"/>\n")
+    SET(MARIADB_INCLUDE_FILES "${MARIADB_INCLUDE_FILES} <File Id=\"${src_id}\" Name=\"${src_name}\"  DiskId=\"1\"  Source=\"${PROJECT_SOURCE_DIR}/include/${src}\"/>\n")
   ENDIF()
 ENDFOREACH()
 
@@ -92,5 +92,5 @@ SET_TARGET_PROPERTIES(${WIXOBJ} PROPERTIES EXCLUDE_FROM_ALL OFF)
 ADD_DEPENDENCIES(${MSI_PACKAGE} WIXOBJ)
 ADD_DEPENDENCIES(WIXOBJ libmariadb mariadbclient ${DYNAMIC_TARGETS}) 
 
-CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/win/packaging/mariadb-connector-c.xml.in
-  ${CMAKE_BINARY_DIR}/win/packaging/mariadb-connector-c.xml)
+CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/win/packaging/mariadb-connector-c.xml.in
+  ${PROJECT_BINARY_DIR}/win/packaging/mariadb-connector-c.xml)
diff --git a/zlib/CMakeLists.txt b/zlib/CMakeLists.txt
index a7a58c9..9ea6bc4 100644
--- a/zlib/CMakeLists.txt
+++ b/zlib/CMakeLists.txt
@@ -1,4 +1,4 @@
-INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/zlib)
+INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/zlib)
 
 SET(SOURCE_FILES adler32.c compress.c crc32.c deflate.c gzclose.c gzlib.c gzread.c gzwrite.c infback.c inffast.c inflate.c inftrees.c minigzip.c trees.c uncompr.c zutil.c)
 
